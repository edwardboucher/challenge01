TARGET_NODE="minion1"
#DOCS EXAMPLE HELP
sudo salt ${TARGET_NODE} sys.list_functions pkg
sudo salt ${TARGET_NODE} sys.list_functions test

##detail
sudo salt ${TARGET_NODE} sys.argspec pkg.install
sudo salt ${TARGET_NODE} sys.argspec pkg.*
sudo salt ${TARGET_NODE} sys.doc sys.doc
sudo salt ${TARGET_NODE} sys.doc test
sudo salt ${TARGET_NODE} sys.doc 

#all execution modules
sudo salt ${TARGET_NODE} sys.list_modules
#general sys functions
sudo salt ${TARGET_NODE} sys.list_functions sys

##remove
sudo salt ${TARGET_NODE} pkg.remove chrony test=True
##list repos
sudo salt ${TARGET_NODE} pkg.list_repos

#TESTING
##help  
sudo salt ${TARGET_NODE} sys.list_functions test
sudo salt ${TARGET_NODE} sys.doc test
##execute
sudo salt '*' test.ping
sudo salt ${TARGET_NODE} test.stack
sudo salt ${TARGET_NODE} test.versions_information
sudo salt '*' test.outputter "Hello, World!"

#Add New Group/User
sudo salt ${TARGET_NODE} group.add salt
sudo salt ${TARGET_NODE} group.adduser salt linuxuser
sudo salt ${TARGET_NODE} user.add eboucher groups=salt,sudo home=/home/eboucher shell=/bin/bash fullname="E Boucher

#password
sudo salt ${TARGET_NODE} shadow.gen_password 'mypassword'
sudo salt ${TARGET_NODE} shadow.set_password eboucher '<hash>'

#grains
#custom grains are local to minion
#non inane grains are in /etc/salt/grains
sudo salt ${TARGET_NODE} sys.list_functions grains
sudo salt ${TARGET_NODE} grains.ls
sudo salt ${TARGET_NODE} grains.items

sudo salt ${TARGET_NODE} grains.get 'uuid'
#add grain
sudo salt 'minion1' grains.set 'sites' external
#convert to list and add grain
sudo salt 'minion1' grains.append sites internal convert=True

# remove from list
sudo salt 'minion1' grains.remove sites internal
#delete grain entirely
sudo salt 'minion1' grains.delkey sites



#mine
sudo -i
cat << EOF > /etc/salt/minion.d/mine.conf
mine_functions:
   network.ip_addrs: []
EOF

sudo salt '*' mine.update
sudo salt '*' mine.get '*' network.ip_addrs

#cmd module (example)
sudo salt ${TARGET_NODE} cmd.run 'echo "export API_KEY=KEYDATA" >> .bashrc' runas=user
Sudo salt ${TARGET_NODE}  cmd.run "cat /etc/salt/grains"
sudo salt ${TARGET_NODE} grains.ls | grep stig
#(wndows)
sudo salt ${TARGET_NODE} cmd.run 'C:\salt\salt-call.bat --version
sudo salt ${TARGET_NODE} cmd.run 'C:\salt\salt-call.bat --grains'
sudo salt ${TARGET_NODE} cmd.run 'C:\salt\salt-call.bat --documentation pkg'


#pillars
#no default pillars -default /srv/pillar on master
#Only get applied when salt minion restarts OR
sudo salt '*' saltutil.refresh_pillar

#states
Salt '*' sate.apply <state_name>

#windows
TARGET=WIN-BFJL0LTP7RD.localdomain
#########
sudo salt ${TARGET} cmd.run '$PSVersionTable.CLRVersion' shell=powershell
sudo salt ${TARGET} cmd.run 'ipconfig /all' shell=powershell
sudo salt ${TARGET} cmd.run 'shutdown /r /t 05' shell=powershell
sudo salt ${TARGET} cmd.run 'Get-EventLog -LogName Application -Newest 10' shell=powershell
sudo salt ${TARGET} task.create_task_from_xml test_task2 xml_path=C:\temp\test_task.xml

#further research:
#MIGHT this work better..##########################################
ewrelic_php_ini:
  file.replace:
  {% if grains['os_family'] == 'RedHat' %}
    - name: /etc/php.d/newrelic.ini
  {% elif grains['os_family'] == 'Debian' %}
    - name: /etc/php5/mods-available/newrelic.ini
  {% endif %}
    - pattern: 'newrelic.license = .*'
    - repl: newrelic.license = "{{ salt['pillar.get']('newrelic:apikey', '') }}"
##########################################

##PYTHON##
output = subprocess.check_output("sudo systemctl status ntpd | grep Active:", shell=True)

#SITES USED
https://www.linode.com/docs/guides/create-a-salt-execution-module/
https://linuxacademy.com/
https://docs.saltproject.io/en/latest/
https://implement.pt/2019/01/an-advanced-guide-to-salt/




